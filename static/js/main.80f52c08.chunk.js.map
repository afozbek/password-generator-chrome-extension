{"version":3,"sources":["components/icons/ClipboardIcon.js","App.js","characters.js","messages.js","serviceWorker.js","index.js"],"names":["ClipboardIcon","className","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","toast","configure","App","useState","password","setPassword","passwordLength","setPasswordLength","includeUppercase","setIncludeUppercase","includeLowercase","setIncludeLowercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","copyBtn","useRef","handleGeneratePassword","e","characterList","createPassword","notify","characterListLength","length","i","characterIndex","getRandomIndex","charAt","limit","Math","round","random","useEffect","message","hasError","error","position","POSITION","TOP_CENTER","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onClick","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","current","disabled","setTimeout","copyToClipboard","ref","htmlFor","name","id","type","max","min","defaultValue","onChange","target","value","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.80f52c08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ClipboardIcon = () => {\r\n  return (\r\n    <svg className=\"clipboard-icon\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"far\" data-icon=\"clipboard\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg>\r\n  )\r\n}\r\n\r\nexport default ClipboardIcon;","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport ClipboardIcon from \"./components/icons/ClipboardIcon\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { COPY_SUCCESS } from \"./messages\";\r\nimport {\r\n  numbers,\r\n  lowerCaseLettters,\r\n  upperCaseLetters,\r\n  specialCharacters,\r\n} from \"./characters\";\r\n\r\ntoast.configure();\r\n\r\nfunction App() {\r\n  const [password, setPassword] = useState(\"\");\r\n  // const [copyBtnText, setCopyBtnText] = useState(\"COPY\");\r\n  const [passwordLength, setPasswordLength] = useState(20);\r\n  const [includeUppercase, setIncludeUppercase] = useState(true);\r\n  const [includeLowercase, setIncludeLowercase] = useState(true);\r\n  const [includeNumbers, setIncludeNumbers] = useState(true);\r\n  const [includeSymbols, setIncludeSymbols] = useState(true);\r\n\r\n  const copyBtn = useRef();\r\n\r\n  const handleGeneratePassword = (e) => {\r\n    if (\r\n      !includeUppercase &&\r\n      !includeLowercase &&\r\n      !includeNumbers &&\r\n      !includeSymbols\r\n    ) {\r\n      debugger;\r\n      notify(\"You must select at least one option\", true);\r\n\r\n      return;\r\n    }\r\n\r\n    let characterList = \"\";\r\n\r\n    if (includeLowercase) {\r\n      characterList += lowerCaseLettters;\r\n    }\r\n\r\n    if (includeUppercase) {\r\n      characterList += upperCaseLetters;\r\n    }\r\n\r\n    if (includeNumbers) {\r\n      characterList += numbers;\r\n    }\r\n\r\n    if (specialCharacters) {\r\n      characterList += specialCharacters;\r\n    }\r\n\r\n    setPassword(createPassword(characterList));\r\n  };\r\n\r\n  const createPassword = (characterList) => {\r\n    let password = \"\";\r\n    const characterListLength = characterList.length;\r\n\r\n    for (let i = 0; i < passwordLength; i++) {\r\n      const characterIndex = getRandomIndex(characterListLength);\r\n      password += characterList.charAt(characterIndex);\r\n    }\r\n\r\n    return password;\r\n  };\r\n\r\n  const getRandomIndex = (limit) => {\r\n    return Math.round(Math.random() * limit);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGeneratePassword();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const copyToClipboard = () => {\r\n    const newTextArea = document.createElement(\"textarea\");\r\n    newTextArea.innerText = password;\r\n    document.body.appendChild(newTextArea);\r\n    newTextArea.select();\r\n    document.execCommand(\"copy\");\r\n    newTextArea.remove();\r\n\r\n    copyBtn.current.disabled = true;\r\n    setTimeout(() => {\r\n      copyBtn.current.disabled = false;\r\n    }, 3000);\r\n  };\r\n\r\n  const notify = (message, hasError = false) => {\r\n    if (hasError) {\r\n      toast.error(message, {\r\n        position: toast.POSITION.TOP_CENTER,\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    } else {\r\n      toast(message, {\r\n        position: toast.POSITION.TOP_CENTER,\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCopyPassword = (e) => {\r\n    copyToClipboard();\r\n\r\n    notify(COPY_SUCCESS);\r\n  };\r\n\r\n  return (\r\n    <div className=\"m-container\">\r\n      <div className=\"m-generator\">\r\n        <h2 className=\"m-generator__header\">Password Generator</h2>\r\n\r\n        <div className=\"m-generator__password\">\r\n          {password}\r\n          <button\r\n            className=\"m-generator__passwordGenerateBtn\"\r\n            onClick={handleCopyPassword}\r\n            ref={copyBtn}\r\n          >\r\n            <ClipboardIcon />\r\n            {/* {copyBtnText} */}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password-length\">Password length</label>\r\n          <input\r\n            name=\"password-length\"\r\n            id=\"password-length\"\r\n            type=\"number\"\r\n            max=\"20\"\r\n            min=\"10\"\r\n            defaultValue={passwordLength}\r\n            onChange={(e) => setPasswordLength(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"uppercase-letters\">Include uppercase letters</label>\r\n          <input\r\n            id=\"uppercase-letters\"\r\n            name=\"uppercase-letters\"\r\n            type=\"checkbox\"\r\n            checked={includeUppercase}\r\n            onChange={(e) => setIncludeUppercase(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lowercase-letters\">Include lowercase letters</label>\r\n          <input\r\n            id=\"lowercase-letters\"\r\n            name=\"lowercase-letters\"\r\n            type=\"checkbox\"\r\n            checked={includeLowercase}\r\n            onChange={(e) => setIncludeLowercase(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"include-numbers\">Include Numbers</label>\r\n          <input\r\n            id=\"include-numbers\"\r\n            name=\"include-numbers\"\r\n            type=\"checkbox\"\r\n            checked={includeNumbers}\r\n            onChange={(e) => setIncludeNumbers(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"include-symbols\">Include Symbols</label>\r\n          <input\r\n            id=\"include-symbols\"\r\n            name=\"include-symbols\"\r\n            type=\"checkbox\"\r\n            checked={includeSymbols}\r\n            onChange={(e) => setIncludeSymbols(e.target.checked)}\r\n          />\r\n        </div>\r\n\r\n        <button className=\"m-generator__btn\" onClick={handleGeneratePassword}>\r\n          Generate Password\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const numbers = \"0123456789\";\r\nexport const upperCaseLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nexport const lowerCaseLettters = \"abcdefghijklmnopqrstuvwxyz\";\r\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","export const COPY_SUCCESS = \"Password successfully copied to clipboard\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"./main.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}